import java.nio.file.Paths

plugins {
  id 'org.springframework.boot'         version "${springBootVersion}"
  id 'io.spring.dependency-management'  version "${springDependencyManagementVersion}"
}

archivesBaseName = "marci-hr-app-core"

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

configurations {
  commonJars { transitive = true }
  springJars { transitive = true }
  hibernateJars { transitive = false }
  serverAppJars { transitive = false }
}

dependencies {
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: "${springBootVersion}"
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: "${springBootVersion}"

  testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

  // Common Runtime Jars
  commonJars group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: "${jacksonVersion}"
  commonJars group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: "${jacksonVersion}"
  commonJars group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: "${jacksonVersion}"
  commonJars group: 'org.slf4j', name: 'slf4j-api', version: "${slf4jVersion}"
  commonJars group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: "${junitJupiterVersion}"
  commonJars group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: "${junitJupiterVersion}"

  // Hibernate Runtime Jars
  hibernateJars group: 'org.postgresql', name: 'postgresql', version: "${postgresVersion}"
  hibernateJars group: 'org.hibernate.common', name: 'hibernate-commons-annotations', version: "${hibernateCommonVersion}"
  hibernateJars group: 'org.hibernate.validator', name: 'hibernate-validator', version: "${hibernateValidatorVersion}"
  hibernateJars group: 'org.hibernate.orm', name: 'hibernate-core', version: "${hibernateOrmVersion}"
  hibernateJars group: 'jakarta.persistence', name: 'jakarta.persistence-api', version: "${jakartaPersistenceApiVersion}"

  // Spring Runtime Jars
  springJars group: 'org.springframework', name: 'spring-core', version: "${springFrameworkVersion}"
  springJars group: 'org.springframework', name: 'spring-context', version: "${springFrameworkVersion}"
  springJars group: 'org.springframework', name: 'spring-webmvc', version: "${springFrameworkVersion}"
  springJars group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: "${springBootVersion}"
  springJars group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: "${springBootVersion}"

  // Server Runtime Jars
  serverAppJars group: 'net.marci.core', name: 'marci-modules-common', version: "${marciCoreVersion}"
  serverAppJars group: 'net.marci.core', name: 'marci-lib-common', version: "${marciCoreVersion}"
  serverAppJars group: 'net.marci.hr', name: 'marci-hr-employee', version: "${marciHrVersion}"
  serverAppJars group: 'net.marci.hr', name: 'marci-hr-app-core', version: "${marciHrVersion}"
}

tasks.register('releaseServer') {
  doLast {
    final String currentDir = System.getProperty("user.dir");
    final String parentDir = Paths.get(currentDir).getParent().toString();
    final String serverAppDir = parentDir + "\\release";
    println "Deploying => ${serverAppDir}";

    println ">> Common Jars...";
    configurations.commonJars.each { File file ->
      copy { from file into "${serverAppDir}/libs/common" }
    }

    println ">> Spring Jars...";
    configurations.springJars.each { File file ->
      copy { from file into "${serverAppDir}/libs/springboot" }
    }

    println ">> Hibernate Jars...";
    configurations.hibernateJars.each { File file ->
      copy { from file into "${serverAppDir}/libs/hibernate" }
    }

    println ">> Server Jars...";
    configurations.serverAppJars.each { File file ->
      copy { from file into "${serverAppDir}/libs" }
    }
  }
}

tasks.register('release') {
  dependsOn 'build'
  dependsOn 'releaseServer'
}